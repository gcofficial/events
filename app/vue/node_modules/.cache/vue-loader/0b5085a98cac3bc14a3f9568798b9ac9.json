{"remainingRequest":"/Users/gurieveugen/Sites/events/wp-content/plugins/events/app/vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/gurieveugen/Sites/events/wp-content/plugins/events/app/vue/src/scenes/Options.vue?vue&type=style&index=1&id=ad02a558&scoped=true&lang=css&","dependencies":[{"path":"/Users/gurieveugen/Sites/events/wp-content/plugins/events/app/vue/src/scenes/Options.vue","mtime":1564886882789},{"path":"/Users/gurieveugen/Sites/events/wp-content/plugins/events/app/vue/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/gurieveugen/Sites/events/wp-content/plugins/events/app/vue/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/gurieveugen/Sites/events/wp-content/plugins/events/app/vue/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/gurieveugen/Sites/events/wp-content/plugins/events/app/vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/gurieveugen/Sites/events/wp-content/plugins/events/app/vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.el-row{\n  margin-top: 10px;\n}\n.el-date-editor.el-input__inner{\n  width: 100%;\n}\n\nlabel{\n  font-weight: bold;\n}\n.selected-address{\n  margin-top: 10px;\n  display: block;\n}\n",{"version":3,"sources":["Options.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Options.vue","sourceRoot":"src/scenes","sourcesContent":["<template>\n  <div class=\"event-options\">\n    <el-row>\n      <el-col :span=\"8\">\n        <label class=\"el-form-item__label\">Time & date:</label>\n      </el-col>\n      <el-col :span=\"16\">\n        <el-date-picker\n          v-model=\"ft\"\n          type=\"datetimerange\"\n          :picker-options=\"pickerOptions\"\n          start-placeholder=\"Start date\"\n          end-placeholder=\"End date\"\n          align=\"right\">\n        </el-date-picker>\n        <input type=\"hidden\" name=\"from\" ref=\"from\" :value=\"fromValue\">\n        <input type=\"hidden\" name=\"to\" ref=\"to\" :value=\"toValue\">\n      </el-col>\n    </el-row>\n    <el-row>\n      <el-col :span=\"8\">\n        <label class=\"el-form-item__label\">Location:</label>\n      </el-col>\n      <el-col :span=\"16\">\n        <el-input\n          name=\"location\"\n          placeholder=\"Enter a location\"\n          v-model=\"loc\"\n          ref=\"location\"\n          clearable>\n        </el-input>\n      </el-col>\n    </el-row>\n  </div>\n</template>\n\n<script>\nimport { mapActions } from 'vuex'\nexport default {\n  name: 'app',\n  props: ['location', 'from', 'to'],\n  computed: {\n    fromValue() {\n      return this.getDateFromArray(this.ft, 0)\n    },\n    toValue() {\n      return this.getDateFromArray(this.ft, 1)\n    }\n  },\n  data() {\n    return {\n      loc: '',\n      ft: '',\n      googleAutocomplete: null,\n      pickerOptions: {\n        shortcuts: [\n          {\n            text: 'Next day',\n            onClick(picker) {\n              const end = new Date()\n              const start = new Date()\n              end.setTime(start.getTime() + 3600 * 1000 * 24 * 1)\n              picker.$emit('pick', [start, end])\n            }\n          },\n          {\n            text: 'Next week',\n            onClick(picker) {\n              const end = new Date()\n              const start = new Date()\n              end.setTime(start.getTime() + 3600 * 1000 * 24 * 7)\n              picker.$emit('pick', [start, end])\n            }\n          },\n          {\n            text: 'Next month',\n            onClick(picker) {\n              const end = new Date()\n              const start = new Date()\n              end.setTime(start.getTime() + 3600 * 1000 * 24 * 30)\n              picker.$emit('pick', [start, end])\n            }\n          },\n        ]\n      },\n    }\n  },\n  async mounted() {\n    this.loc = this.location\n    this.ft = [this.from, this.to]\n    await this.loadGoogle()\n    let inputEl = this.$refs.location.$el.getElementsByTagName('input')[0]\n    let input = new google.maps.places.Autocomplete(inputEl)\n\n    google.maps.event.addDomListener(\n      inputEl,\n      'keydown',\n      function(e) {\n        if (e.keyCode == 13) {\n          e.preventDefault()\n        }\n      }\n    )\n\n    this.googleAutocomplete = input\n  },\n  methods: {\n    ...mapActions([\n      'loadGoogle',\n    ]),\n    getDateFromArray(arr, index) {\n      if (arr instanceof Array) {\n        if ('object' === typeof(arr[index])) {\n          return arr[index].toISOString().slice(0, 19).replace('T', ' ')\n        }\n        return arr[index]\n      }\n      return ''\n    }\n  }\n}\n</script>\n\n<style>\n  .el-input .el-input__inner{\n    box-shadow: none;\n  }\n  div.el-date-editor .el-range-input,\n  div.el-date-editor .el-range-separator{\n    text-align: left;\n  }\n</style>\n\n<style scoped>\n  .el-row{\n    margin-top: 10px;\n  }\n  .el-date-editor.el-input__inner{\n    width: 100%;\n  }\n\n  label{\n    font-weight: bold;\n  }\n  .selected-address{\n    margin-top: 10px;\n    display: block;\n  }\n</style>\n"]}]}